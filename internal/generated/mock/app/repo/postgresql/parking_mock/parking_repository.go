// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fjrid/parking/internal/app/repo/postgresql/parking (interfaces: ParkingRepository)

// Package parking_mock is a generated GoMock package.
package parking_mock

import (
	context "context"
	dto "github.com/fjrid/parking/internal/app/model/dto"
	entity "github.com/fjrid/parking/internal/app/model/entity"
	sqkit "github.com/fjrid/parking/pkg/sqkit"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockParkingRepository is a mock of ParkingRepository interface
type MockParkingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockParkingRepositoryMockRecorder
}

// MockParkingRepositoryMockRecorder is the mock recorder for MockParkingRepository
type MockParkingRepositoryMockRecorder struct {
	mock *MockParkingRepository
}

// NewMockParkingRepository creates a new mock instance
func NewMockParkingRepository(ctrl *gomock.Controller) *MockParkingRepository {
	mock := &MockParkingRepository{ctrl: ctrl}
	mock.recorder = &MockParkingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockParkingRepository) EXPECT() *MockParkingRepositoryMockRecorder {
	return m.recorder
}

// CreateParking mocks base method
func (m *MockParkingRepository) CreateParking(arg0 context.Context, arg1 dto.CreateParkingRequest) (entity.Parking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateParking", arg0, arg1)
	ret0, _ := ret[0].(entity.Parking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateParking indicates an expected call of CreateParking
func (mr *MockParkingRepositoryMockRecorder) CreateParking(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParking", reflect.TypeOf((*MockParkingRepository)(nil).CreateParking), arg0, arg1)
}

// CreateParkingBook mocks base method
func (m *MockParkingRepository) CreateParkingBook(arg0 context.Context, arg1 dto.CreateParkingBookRequest) (entity.ParkingBook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateParkingBook", arg0, arg1)
	ret0, _ := ret[0].(entity.ParkingBook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateParkingBook indicates an expected call of CreateParkingBook
func (mr *MockParkingRepositoryMockRecorder) CreateParkingBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParkingBook", reflect.TypeOf((*MockParkingRepository)(nil).CreateParkingBook), arg0, arg1)
}

// CreateParkingSlot mocks base method
func (m *MockParkingRepository) CreateParkingSlot(arg0 context.Context, arg1 dto.CreateParkingSlotRequest) (entity.ParkingSlot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateParkingSlot", arg0, arg1)
	ret0, _ := ret[0].(entity.ParkingSlot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateParkingSlot indicates an expected call of CreateParkingSlot
func (mr *MockParkingRepositoryMockRecorder) CreateParkingSlot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParkingSlot", reflect.TypeOf((*MockParkingRepository)(nil).CreateParkingSlot), arg0, arg1)
}

// FindBookByIDAndUserIDAndStatus mocks base method
func (m *MockParkingRepository) FindBookByIDAndUserIDAndStatus(arg0 context.Context, arg1, arg2 int64, arg3 string) ([]entity.ParkingBook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBookByIDAndUserIDAndStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]entity.ParkingBook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBookByIDAndUserIDAndStatus indicates an expected call of FindBookByIDAndUserIDAndStatus
func (mr *MockParkingRepositoryMockRecorder) FindBookByIDAndUserIDAndStatus(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBookByIDAndUserIDAndStatus", reflect.TypeOf((*MockParkingRepository)(nil).FindBookByIDAndUserIDAndStatus), arg0, arg1, arg2, arg3)
}

// FindBookByUserIDAndStatus mocks base method
func (m *MockParkingRepository) FindBookByUserIDAndStatus(arg0 context.Context, arg1 int64, arg2 string) ([]entity.ParkingBook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBookByUserIDAndStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entity.ParkingBook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBookByUserIDAndStatus indicates an expected call of FindBookByUserIDAndStatus
func (mr *MockParkingRepositoryMockRecorder) FindBookByUserIDAndStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBookByUserIDAndStatus", reflect.TypeOf((*MockParkingRepository)(nil).FindBookByUserIDAndStatus), arg0, arg1, arg2)
}

// FindParkingByName mocks base method
func (m *MockParkingRepository) FindParkingByName(arg0 context.Context, arg1 string) ([]entity.Parking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindParkingByName", arg0, arg1)
	ret0, _ := ret[0].([]entity.Parking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindParkingByName indicates an expected call of FindParkingByName
func (mr *MockParkingRepositoryMockRecorder) FindParkingByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindParkingByName", reflect.TypeOf((*MockParkingRepository)(nil).FindParkingByName), arg0, arg1)
}

// FindParkingSlot mocks base method
func (m *MockParkingRepository) FindParkingSlot(arg0 context.Context, arg1 dto.ViewPagination, arg2 ...sqkit.SelectOption) ([]entity.SummaryParkingSlot, dto.ViewPagination, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindParkingSlot", varargs...)
	ret0, _ := ret[0].([]entity.SummaryParkingSlot)
	ret1, _ := ret[1].(dto.ViewPagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindParkingSlot indicates an expected call of FindParkingSlot
func (mr *MockParkingRepositoryMockRecorder) FindParkingSlot(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindParkingSlot", reflect.TypeOf((*MockParkingRepository)(nil).FindParkingSlot), varargs...)
}

// FindSlotByID mocks base method
func (m *MockParkingRepository) FindSlotByID(arg0 context.Context, arg1 int64) ([]entity.ParkingSlot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSlotByID", arg0, arg1)
	ret0, _ := ret[0].([]entity.ParkingSlot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSlotByID indicates an expected call of FindSlotByID
func (mr *MockParkingRepositoryMockRecorder) FindSlotByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSlotByID", reflect.TypeOf((*MockParkingRepository)(nil).FindSlotByID), arg0, arg1)
}

// ParkingBookSummary mocks base method
func (m *MockParkingRepository) ParkingBookSummary(arg0 context.Context, arg1, arg2 string) (dto.SummaryParkingBook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParkingBookSummary", arg0, arg1, arg2)
	ret0, _ := ret[0].(dto.SummaryParkingBook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParkingBookSummary indicates an expected call of ParkingBookSummary
func (mr *MockParkingRepositoryMockRecorder) ParkingBookSummary(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParkingBookSummary", reflect.TypeOf((*MockParkingRepository)(nil).ParkingBookSummary), arg0, arg1, arg2)
}

// UpdateParkingBook mocks base method
func (m *MockParkingRepository) UpdateParkingBook(arg0 context.Context, arg1 entity.ParkingBook) (entity.ParkingBook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateParkingBook", arg0, arg1)
	ret0, _ := ret[0].(entity.ParkingBook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateParkingBook indicates an expected call of UpdateParkingBook
func (mr *MockParkingRepositoryMockRecorder) UpdateParkingBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateParkingBook", reflect.TypeOf((*MockParkingRepository)(nil).UpdateParkingBook), arg0, arg1)
}

// UpdateParkingSlot mocks base method
func (m *MockParkingRepository) UpdateParkingSlot(arg0 context.Context, arg1 entity.ParkingSlot) (entity.ParkingSlot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateParkingSlot", arg0, arg1)
	ret0, _ := ret[0].(entity.ParkingSlot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateParkingSlot indicates an expected call of UpdateParkingSlot
func (mr *MockParkingRepositoryMockRecorder) UpdateParkingSlot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateParkingSlot", reflect.TypeOf((*MockParkingRepository)(nil).UpdateParkingSlot), arg0, arg1)
}
